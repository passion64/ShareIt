/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sharefile;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.net.*;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;


/**
 *
 * @author Muskan
 */

public class Recieve extends javax.swing.JFrame {

    /**
     * Creates new form Recieve
     */
      static ServerSocket serverSocket;
      static Socket clientSocket1;
      FirstPage fp;
      
    public Recieve(FirstPage ob) {
        
        initComponents();
        fp=ob;
        
        try {
            serverSocket = new ServerSocket(4444);
            
            System.out.println("Server started.");
        } catch (Exception e) {
            System.err.println("Port already in use.");
            System.exit(1);
        }
        add(progress);
        progress.setVisible(true);
        setLayout(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progress = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        filenameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        progress.setStringPainted(true);

        jLabel1.setText("Waiting to recieve file......");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(203, 203, 203))
            .addGroup(layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(158, 158, 158))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          try {
              // TODO add your handling code here:
              serverSocket.close();
          } catch (IOException ex) {
              Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
          }
        fp.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recieve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recieve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recieve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recieve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Recieve().setVisible(true);
            }
        });
        
        //accept connection
        while (true) {
            try {
                clientSocket1 = serverSocket.accept();
                System.out.println("Accepted connection : " + clientSocket1);
                
                Thread t = new Thread(new RecieveConnection(clientSocket1));
                t.start();
                
            } catch (Exception e) {
                //System.err.println("Error in connection attempt.");
            }
        }
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel filenameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables



static class RecieveConnection extends Thread {
    
    static Socket clientsocket;
    DataOutputStream dout;
    DataInputStream din;
    String uname,sendname,s;    
    File f;
    String str;
    String len;
    
    public RecieveConnection(Socket s)
    {
        clientsocket = s;
    }
    public void run()
    {
        
       try{
           jdbc j = new jdbc();
           ResultSet [] rs=new ResultSet[10];
           String sql="Select `username` from `userinfo`";
           j.search(sql, rs);
           while(rs[0].next()){
                 uname=rs[0].getString("username");
            }
           din = new DataInputStream(clientsocket.getInputStream());
            
           while(true){
            if(din.available()>0)   {
                str=(String)din.readUTF();
                break;
            }
           }
           System.out.println(str);
           if(str.compareTo("accept conn")==0){
           dout = new DataOutputStream(clientsocket.getOutputStream());
           
           dout.writeUTF(uname);
           dout.flush();
           
           sleep(5);
           clientsocket.close();
           }
           else if(str.contains("recieve file")==true){
          // else if(str.compareTo("recieve file")==0){
                
               Thread t=new Thread(new ReceiveFile());
               
               String s1 = str.substring(13);
               len=s1.substring(0, s1.lastIndexOf("@@"));
               s1=s1.substring(s1.indexOf("@@")+2);
               s = s1.substring(0,s1.lastIndexOf("$$")); // location
               sendname = s1.substring(s1.lastIndexOf("$$")+2);
               System.out.println(len+s+sendname);
               
                f = new File("E:"+File.separator+"ShareFiles"+File.separator+s.substring(s.lastIndexOf(File.separator)+1));
                System.out.println("download lcatin E:"+File.separator+"ShareFiles"+File.separator+s.substring(s.lastIndexOf(File.separator)+1));
                
                System.out.println("file exists r not " );
                if(f.exists()){
                    //int dialogButton = JOptionPane.YES_NO_OPTION;
                    int dialogResult =  JOptionPane.showConfirmDialog(null,
                "Do you want to override the existing file?", "File already exists...",JOptionPane.YES_NO_CANCEL_OPTION);

                    if(dialogResult == JOptionPane.YES_OPTION){
                        t.start();
                    }
                }    
                else
                    t.start();
               //File f = new File("E://");
               //t.start();
           }
           
       }
       catch(Exception e){
           e.printStackTrace();
       }
        
        
        
    }
    class ReceiveFile extends Thread{
    
    
        public void run(){
            FileOutputStream fout = null;
            try{
                //Receive file karne wala code
                
                fout = new FileOutputStream(f);
                byte[] bytes = new byte[16*1024];
                long fileSize=Integer.valueOf(len);
                int total=0,count;
                try{
                    while ((count = din.read(bytes)) > 0) {
                        fout.write(bytes, 0, count);
                        total+=count;
                        final int currentProgress = (int) ((((double)total) / ((double)fileSize)) * 100d);
                        
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                progress.setValue(currentProgress);
                            }
                        });
                    }
                    fout.close();
                    System.out.println("recieved file");
                    
                    
                    //updating the database
                    
                   //String query= "Insert into `fileinfo 
                   
                   String filename = s.substring(s.lastIndexOf(File.separator)+1);
                   String type = filename.substring(filename.lastIndexOf('.')+1);
                   filenameLabel.setSize(filename.length()*10,15);
                   filenameLabel.setText(filename);
                   
                   JOptionPane.showMessageDialog(null, filename+" received");
                   String query="Insert into `fileinfo`(`name`,`type`,`size`) values('"+filename+"','"+type+"','"+total+"')";
                   System.out.println(query);
                  jdbc j=new jdbc();
                   j.execute(query);
                   query="Select `id` from `fileinfo` where `name` like '"+filename+"' and `size`='"+total+"'";
            ResultSet []rset1= new ResultSet[10];
            j.search(query, rset1);
            int fileid=0;
            while(rset1[0].next()){
                 fileid=rset1[0].getInt("id");
            }

            String dt=java.time.LocalDate.now().toString();
           query="INSERT INTO `receive`(`fileid`, `send_name`, `date`,`location`) VALUES ('"+fileid+"','"+sendname+"','"+dt+"','"+s+"')"; 
           System.out.println("sec query "+query);
            j.execute(query);
                    
                }
                catch(Exception e){}
                
            }
            catch(FileNotFoundException ex){Logger.getLogger(RecieveConnection.class.getName()).log(Level.SEVERE, null, ex);
} finally {
                try {
                    fout.close();
                } catch (IOException ex) {
                    Logger.getLogger(RecieveConnection.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           
            
            
            
        }
    }
    
    
}

}
